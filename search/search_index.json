{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"This is a temporary homepage.","title":"Home"},{"location":"TASK-4RAS/","text":"TASK-4RAS - HR, NH Schedule : September 2020 to September 2021 (Initially planned from August 2021 February 2022) Context The 4D platform developed at EPFL with the collaboration of Cadastre Suisse is able to ingest both large scale point-based and vector-based models. During the previous development, the possibility to have this different type of data in a single framework lead to interesting results, showing the interest to have the possibility to put this different type of data into perspectives. Illustrations of mixed models in the 4D platform : INTERLIS, Mesh and LIDA - Data : SITN Taking into account point-based and vector-based model allows to almost cover all type of data that are traditionally considered for land registering. The only type of data that is currently missing are the two-dimensional rasters. Indeed, due to their nature, image are more complicated to put in perspective of other three-dimensional data. The goal of this task is then to address the management of the raster by the platform in order to be able to ingest, store and broadcast any type of data with the 4D platform. Specifications In order to address this task, a step-by-step approach is defined. In the first place, a set of data has to be gathered from the STDL partners : Gathering a dataset of geo-referenced ortho-photography of a chosen place of reasonable size The dataset has to provide ortho-photography for at least two different times The format of the dataset has to be analysed in order to be able to extract the image pixels with their position (CH1903+) As the platform indexation formalism is not straightforward, the images are treated as point-based model, each pixel being one colored point of the model. This will allows to provide a way of starting to analyse and understand the indexation formalism while having first results on image integration : Transform images into simple point-based models (each pixel being one point) Injection of the point-based model in an experimental instance of the platform Understanding the indexation formalism for point-based model and, subsequently, its adaptation for the vector-based models As the indexation formalism is understood for point-based model, the following adaptation will be performed : removing the third dimension from the point-based indexation specifically for the image (flat indexation) At this point, a first reporting is required : Is there a advantage to add raster to such platform in perspective of the other types of model (points, vectors, meshes) ? How the adaptation of the point-based indexation performs for images ? How taking advantage of color accumulation enrich the image integration ? What is the cost of rendering the image with the adaptation of the point-based indexation ? Based on the formulated answer, the following strategical choice has to be discussed : Would it be more efficient to integrate image keeping them as raster (deviation from the current indexation) ? Depending on the answer, a new set of specification will be decided (if this direction is flavoured). Depending on the remaining time and on the obtained results, the question of the time management in the platform will be addressed. Currently, the time is treated linearly in the platform and a multi-scale approach, as for the spatial dimensions, could be interesting. The specifications will be decided as the previous points will be fulfilled. Ressources List of the ressources initially linked to the task : liberatosthene - Platform and indexation back-end eratosthene-suite - Platform front-end Other ressources will be provided according to requirements.","title":"TASK-4RAS"},{"location":"TASK-4RAS/#context","text":"The 4D platform developed at EPFL with the collaboration of Cadastre Suisse is able to ingest both large scale point-based and vector-based models. During the previous development, the possibility to have this different type of data in a single framework lead to interesting results, showing the interest to have the possibility to put this different type of data into perspectives. Illustrations of mixed models in the 4D platform : INTERLIS, Mesh and LIDA - Data : SITN Taking into account point-based and vector-based model allows to almost cover all type of data that are traditionally considered for land registering. The only type of data that is currently missing are the two-dimensional rasters. Indeed, due to their nature, image are more complicated to put in perspective of other three-dimensional data. The goal of this task is then to address the management of the raster by the platform in order to be able to ingest, store and broadcast any type of data with the 4D platform.","title":"Context"},{"location":"TASK-4RAS/#specifications","text":"In order to address this task, a step-by-step approach is defined. In the first place, a set of data has to be gathered from the STDL partners : Gathering a dataset of geo-referenced ortho-photography of a chosen place of reasonable size The dataset has to provide ortho-photography for at least two different times The format of the dataset has to be analysed in order to be able to extract the image pixels with their position (CH1903+) As the platform indexation formalism is not straightforward, the images are treated as point-based model, each pixel being one colored point of the model. This will allows to provide a way of starting to analyse and understand the indexation formalism while having first results on image integration : Transform images into simple point-based models (each pixel being one point) Injection of the point-based model in an experimental instance of the platform Understanding the indexation formalism for point-based model and, subsequently, its adaptation for the vector-based models As the indexation formalism is understood for point-based model, the following adaptation will be performed : removing the third dimension from the point-based indexation specifically for the image (flat indexation) At this point, a first reporting is required : Is there a advantage to add raster to such platform in perspective of the other types of model (points, vectors, meshes) ? How the adaptation of the point-based indexation performs for images ? How taking advantage of color accumulation enrich the image integration ? What is the cost of rendering the image with the adaptation of the point-based indexation ? Based on the formulated answer, the following strategical choice has to be discussed : Would it be more efficient to integrate image keeping them as raster (deviation from the current indexation) ? Depending on the answer, a new set of specification will be decided (if this direction is flavoured). Depending on the remaining time and on the obtained results, the question of the time management in the platform will be addressed. Currently, the time is treated linearly in the platform and a multi-scale approach, as for the spatial dimensions, could be interesting. The specifications will be decided as the previous points will be fulfilled.","title":"Specifications"},{"location":"TASK-4RAS/#ressources","text":"List of the ressources initially linked to the task : liberatosthene - Platform and indexation back-end eratosthene-suite - Platform front-end Other ressources will be provided according to requirements.","title":"Ressources"},{"location":"TASK-DIFF/","text":"TASK-DIFF - NH Schedule : September 2020 to February 2021 Context Initially dedicated to handle large scale point-based models, the 4D platform developed at the DHLAB with the collaboration of Cadastre Suisse introduced an optimized Earth-attached indexation formalism. As the data access and broadcast performances where encouraging, it was decided to adapt the indexation formalism for vector-based models allowing the platform to ingest, store and broadcast any type of 3D data. In the context of differencies detection and as the indexation formalism is based on equivalences classes defined on space and time, the space-time is naturally discretized along all of the four dimensions. This allowed to implements simple logical operators on the four-dimensional space. The OR, AND and XOR operators were then implemented allowing the platform to compute, on the fly, convolutions of models to compare one place at two different times. The implementation of theses operators was simple due to the natural spatio-temporal discretization obtained from the indexation formalism. Nevertheless, two major drawback appeared : the first one is that such operator only works for point-based models. Having the possibility to compute and render differences and similarities between any type of data is not possible with such formal operators. The second drawback comes from the nature of the point-based capturing devices. Indeed, taking the example of a building, even without any change to its structure, two digitization campains can lead to disparities only due to the point-based models sampling. The XOR operator is the natural choice to detect and render differences but this operator is very sensitive to sampling disparities. Computing the XOR convolution between two point-based models leads the rendering to be dominated by sampling variations rather than the desired structural differences. This drawback was partially solved by considering the AND operator. Indeed, the AND operator allows to only shows constant structural elements from two different positions in time and is insensitive to sampling disparities. As shown on the following images, the AND operator shows differences as black spots (lack of data) : AND convolution between two LIDAR models : Geneva 2005 and 2009 - Data : SITG As one can see, AND convolution allows to detect, through the black spots, large area of structural changes between the two times and also, with more care, allows to guess more small differences. The goal of this task is to tackle these two drawbacks allowing the platform to detect changes not only for point-based models but also for vector-based models and to show more clearly the differences between the compared to time positions. The task consists then in the implementation, testing and validation of disparity and similarity detection algorithms for any type of data taken at two different times and to conduct a formal analysis on the best detection and rendering techniques. Methodology A step by step methodology is defined to address the problem of differences and similarities detection in the platform. In a first phase, a frist algorithm will be developed and validated on vector-based models as follows : Development of the algorithm on synthetic variations on a vector-based model Validation of the algorithm (using the known synthetic variations) First conclusion In a second phase, true land register data will be used to formally detect real evolution of the territory and to compare them with the land register databases : Obtaining true land register vector-based model (INTERLIS) at two different times Detecting the differences with the algorithm and validate them with the true land register revision In a third phase, the algorithm will be validated (and adapted) to work on point-based models : Obtaining true land register point-based model (LAS) at two different times Detecting the differences between the two times and validate them with the true land register revision Second conclusion Finally, in a last phase, both point-based and vector-based models will be considered without distinction to develop an algorithm able to compare any type of data between themselves based on the conclusion made during the first algorithm development : Detection of differences/similarities on different type of data : flat land register (vector) and 3D models (point, mesh) Analysis and conclusion on the results of the developed algorithm In addition, the development of differences and similarities algorithms has to be conducted keeping in mind the possible future evolution of the platform such as addition of layer (separation of data), implementation of a multi-scale approach of the time dimension and addition of raster data in the platform. First Phase : Synthetic Variations In order to implements the first vector-based differences detection algorithm, sets of data are considered as base on which synthtic differences are applied to simulate the evolution of the territory. This approach allows to focus on well controlled data to formally benchmark the results of the implemented algorithms. Selected Ressources and Models In this first phase, data are gathered from openstreetmap in order to create simple models used during the implementation and validation of the detection algorithms. A first set of vector-based models are considered made only of lines (land register). Three set are create each with a different scale, from city to the whole Switzerland. The line-based sets of data are extracted from openstreetmap shapefiles and the elevation is restored using the SRTM geotiff data. The EGM96-5 geoid model is then used to convert the elevation from MSL to ellipsoid heights. The following images give an illustration of these set of data : Line-based dataset : Switzerland (top), canton of Neuchatel (bottom left) and Frauenfeld city (bottom right) - Data : OSM In order to simulate evolution of the territory in time, synthetic variations are added to these models. A script is developed and used to insert controlled variations on selected primitives. The amount and the amplitude of these variation can also be controlled through the developed script. A second set of triangle-based models is also considered to implement and validate the differences detection algorithm. The selected model is a mesh model of the building of Geneva city. It comes aligned in the CH1903+ frame with the altitudes. It is simply converted into the WGS84 frame using again the EGM95-5 geoid model : Triangle-based dataset : Geneva buildings mesh - Data : SITG The developed script for line-based models is also used here to add synthetic variation to the model primitives in order to simulate an evolution of the territory. Implementation of the Algorithm In order to compare two models at two different positions in time to detect differences, the solution is of course to search for each primitive of the first time if it has a correspondance in the second time. In such case, the primitives can be concluded as static in time and only the primitives that have no correspondance will be highlighted as differences. A first approach was initially tested : a vertex-based comparison. As every primitive (points, lines and triangles) are supported by vertex, it can be seen as a common denominator on which comparison can take place. Unfortunately, it is not a relevant approach as it leads to asymetric detection algorithm. To illustrate the issue, the following image shows the situation of a group of primitives at two different times with an evolution on one of the primitive vertex : Asymetric approach : the variation is detected only when comparing backward in time When the comparison oocurs between the second time compared to the first one, the modified vertex is not found in the first model, and then, the vertex can be highlighted as a difference. The asymetry appears as the frist time is compare to the second one. In this case, despite the primitive vertex has changed, the vertex-based approach is able to find another vertex, part of another static primitive, and interprets it as a vertex identity, leading the modified primitive to be considered as static. In order to obtain fully symetric algorithm, that does not depends on the way models are compared in times, a primitive based approach has to be considered. The implemented algorithm then treats the correspondance problem from the whole primitive point of view, by checking that the whole primitive can be found in the other model to which it is compared to. This allows to highlight any primitive showing a modification, regardless of the way models in time are compared. In addition to highlighting the primitives that changed through time, the implemented algorithm also keeps the primitive that did not changed. The ensemble of primitives are then shown by modulating their color to emphasize the modification by keeping their original color for modified one while the static primitives are shown in dark gray. This allows to not only show the modifications but also to keep the context of the modification helping the user to fully understand the nature of the territory evolution. Additional developments were required for triangle-based models : indeed, such models need to be subjected to a lighting model during rendering for the user to understand the model. As the differences are highlighted through color modulation, the implemented lighting model is causing difficulties to spot the highlighted primitives. The rendering client then checks for the differences detection algorithm and switches off the lighting in such case to make the differences more clear to the user. In addition, mesh models, as they are made of triangles, are hiding parts of themselves. It can then be difficult for the user to spot the highlighted primitives as they can be hidden by others. A option was added to the rendering client allowing the user to ask the rendering of triangles as line-loops or points in order to make them transparent. Experimentations and Results With the implemented algorithm, a series of experimentations are conducted in order to validate and analyze the performance of the differencies detection algorithm for vector-based models. Differences Detection and Rendering With the implemented algorithms, it is possible to highligth any modification in the evolution of a model through time. The following image show examples of modifications and how their are rendered for the user by the graphical client : Example of differences detection on Frauenfeld (left, two detections) and La Chaux-de-Fonds (right, one detection) - Data : OSM Considering one of the two differences detected on the city of Frauenfeld, the following image shows the situation in the two compared models, at their respective position in time, that led to the detection : First model situation (left) compared the the second model situation (right) - Data : OSM On can see that, despite the modification of the primitive vertex is very small and difficult to see, the algorithm is able to detect it and to show the user where to look for evolutions. On this example, the shown evolution of the primitive vertex is of the order of 10 centimetres, leading to a very difficult differences to spot without the help of the algorithm. Considering the triangle-based model, the following image shows how detected differencies are rendered to the user : Example of differences detection on Geneva with filled (left) and line-loops (right) triangle rendering modes - Data : OSM This shows how the differences detection algorithm is able to detect and render differences in a triangle-based model using the same color modulation technique as used for line-based models. One cas see how rendering triangle as line-loops can ease the display of variations on triangle-based models allowing to see through the primitives. Codes and Ressources The following lins gives you access to the codes related to this task : 4D platform main framework library 4D platform front-end including graphical client and server instance Shapefile CSV export to UV3 format conversion script UV3 related tool suite including display and conversion Auxiliary Developments & Corrections In addition to the main developments made on the platform, some other corrections have been made to solve minor problem or to improve the code according to the developed features during this task. The auxiliary developments are summarized here : Correction of socket read function to improve server-client connectivity Creation of scripts that allows to insert sythetic modifications (random displacements on the vertex coordinates) on UV3 models Creation of a script to convert CSV export from shapefile to UV3 format. The script code is available here Dynamical management of lighting during differencies detection on triangle-based models Adding rendering option allowing the user to display triangles as filled triangles, line-loops or points to allow seeing through the primitive","title":"TASK-DIFF"},{"location":"TASK-DIFF/#context","text":"Initially dedicated to handle large scale point-based models, the 4D platform developed at the DHLAB with the collaboration of Cadastre Suisse introduced an optimized Earth-attached indexation formalism. As the data access and broadcast performances where encouraging, it was decided to adapt the indexation formalism for vector-based models allowing the platform to ingest, store and broadcast any type of 3D data. In the context of differencies detection and as the indexation formalism is based on equivalences classes defined on space and time, the space-time is naturally discretized along all of the four dimensions. This allowed to implements simple logical operators on the four-dimensional space. The OR, AND and XOR operators were then implemented allowing the platform to compute, on the fly, convolutions of models to compare one place at two different times. The implementation of theses operators was simple due to the natural spatio-temporal discretization obtained from the indexation formalism. Nevertheless, two major drawback appeared : the first one is that such operator only works for point-based models. Having the possibility to compute and render differences and similarities between any type of data is not possible with such formal operators. The second drawback comes from the nature of the point-based capturing devices. Indeed, taking the example of a building, even without any change to its structure, two digitization campains can lead to disparities only due to the point-based models sampling. The XOR operator is the natural choice to detect and render differences but this operator is very sensitive to sampling disparities. Computing the XOR convolution between two point-based models leads the rendering to be dominated by sampling variations rather than the desired structural differences. This drawback was partially solved by considering the AND operator. Indeed, the AND operator allows to only shows constant structural elements from two different positions in time and is insensitive to sampling disparities. As shown on the following images, the AND operator shows differences as black spots (lack of data) : AND convolution between two LIDAR models : Geneva 2005 and 2009 - Data : SITG As one can see, AND convolution allows to detect, through the black spots, large area of structural changes between the two times and also, with more care, allows to guess more small differences. The goal of this task is to tackle these two drawbacks allowing the platform to detect changes not only for point-based models but also for vector-based models and to show more clearly the differences between the compared to time positions. The task consists then in the implementation, testing and validation of disparity and similarity detection algorithms for any type of data taken at two different times and to conduct a formal analysis on the best detection and rendering techniques.","title":"Context"},{"location":"TASK-DIFF/#methodology","text":"A step by step methodology is defined to address the problem of differences and similarities detection in the platform. In a first phase, a frist algorithm will be developed and validated on vector-based models as follows : Development of the algorithm on synthetic variations on a vector-based model Validation of the algorithm (using the known synthetic variations) First conclusion In a second phase, true land register data will be used to formally detect real evolution of the territory and to compare them with the land register databases : Obtaining true land register vector-based model (INTERLIS) at two different times Detecting the differences with the algorithm and validate them with the true land register revision In a third phase, the algorithm will be validated (and adapted) to work on point-based models : Obtaining true land register point-based model (LAS) at two different times Detecting the differences between the two times and validate them with the true land register revision Second conclusion Finally, in a last phase, both point-based and vector-based models will be considered without distinction to develop an algorithm able to compare any type of data between themselves based on the conclusion made during the first algorithm development : Detection of differences/similarities on different type of data : flat land register (vector) and 3D models (point, mesh) Analysis and conclusion on the results of the developed algorithm In addition, the development of differences and similarities algorithms has to be conducted keeping in mind the possible future evolution of the platform such as addition of layer (separation of data), implementation of a multi-scale approach of the time dimension and addition of raster data in the platform.","title":"Methodology"},{"location":"TASK-DIFF/#first-phase-synthetic-variations","text":"In order to implements the first vector-based differences detection algorithm, sets of data are considered as base on which synthtic differences are applied to simulate the evolution of the territory. This approach allows to focus on well controlled data to formally benchmark the results of the implemented algorithms.","title":"First Phase : Synthetic Variations"},{"location":"TASK-DIFF/#selected-ressources-and-models","text":"In this first phase, data are gathered from openstreetmap in order to create simple models used during the implementation and validation of the detection algorithms. A first set of vector-based models are considered made only of lines (land register). Three set are create each with a different scale, from city to the whole Switzerland. The line-based sets of data are extracted from openstreetmap shapefiles and the elevation is restored using the SRTM geotiff data. The EGM96-5 geoid model is then used to convert the elevation from MSL to ellipsoid heights. The following images give an illustration of these set of data : Line-based dataset : Switzerland (top), canton of Neuchatel (bottom left) and Frauenfeld city (bottom right) - Data : OSM In order to simulate evolution of the territory in time, synthetic variations are added to these models. A script is developed and used to insert controlled variations on selected primitives. The amount and the amplitude of these variation can also be controlled through the developed script. A second set of triangle-based models is also considered to implement and validate the differences detection algorithm. The selected model is a mesh model of the building of Geneva city. It comes aligned in the CH1903+ frame with the altitudes. It is simply converted into the WGS84 frame using again the EGM95-5 geoid model : Triangle-based dataset : Geneva buildings mesh - Data : SITG The developed script for line-based models is also used here to add synthetic variation to the model primitives in order to simulate an evolution of the territory.","title":"Selected Ressources and Models"},{"location":"TASK-DIFF/#implementation-of-the-algorithm","text":"In order to compare two models at two different positions in time to detect differences, the solution is of course to search for each primitive of the first time if it has a correspondance in the second time. In such case, the primitives can be concluded as static in time and only the primitives that have no correspondance will be highlighted as differences. A first approach was initially tested : a vertex-based comparison. As every primitive (points, lines and triangles) are supported by vertex, it can be seen as a common denominator on which comparison can take place. Unfortunately, it is not a relevant approach as it leads to asymetric detection algorithm. To illustrate the issue, the following image shows the situation of a group of primitives at two different times with an evolution on one of the primitive vertex : Asymetric approach : the variation is detected only when comparing backward in time When the comparison oocurs between the second time compared to the first one, the modified vertex is not found in the first model, and then, the vertex can be highlighted as a difference. The asymetry appears as the frist time is compare to the second one. In this case, despite the primitive vertex has changed, the vertex-based approach is able to find another vertex, part of another static primitive, and interprets it as a vertex identity, leading the modified primitive to be considered as static. In order to obtain fully symetric algorithm, that does not depends on the way models are compared in times, a primitive based approach has to be considered. The implemented algorithm then treats the correspondance problem from the whole primitive point of view, by checking that the whole primitive can be found in the other model to which it is compared to. This allows to highlight any primitive showing a modification, regardless of the way models in time are compared. In addition to highlighting the primitives that changed through time, the implemented algorithm also keeps the primitive that did not changed. The ensemble of primitives are then shown by modulating their color to emphasize the modification by keeping their original color for modified one while the static primitives are shown in dark gray. This allows to not only show the modifications but also to keep the context of the modification helping the user to fully understand the nature of the territory evolution. Additional developments were required for triangle-based models : indeed, such models need to be subjected to a lighting model during rendering for the user to understand the model. As the differences are highlighted through color modulation, the implemented lighting model is causing difficulties to spot the highlighted primitives. The rendering client then checks for the differences detection algorithm and switches off the lighting in such case to make the differences more clear to the user. In addition, mesh models, as they are made of triangles, are hiding parts of themselves. It can then be difficult for the user to spot the highlighted primitives as they can be hidden by others. A option was added to the rendering client allowing the user to ask the rendering of triangles as line-loops or points in order to make them transparent.","title":"Implementation of the Algorithm"},{"location":"TASK-DIFF/#experimentations-and-results","text":"With the implemented algorithm, a series of experimentations are conducted in order to validate and analyze the performance of the differencies detection algorithm for vector-based models.","title":"Experimentations and Results"},{"location":"TASK-DIFF/#differences-detection-and-rendering","text":"With the implemented algorithms, it is possible to highligth any modification in the evolution of a model through time. The following image show examples of modifications and how their are rendered for the user by the graphical client : Example of differences detection on Frauenfeld (left, two detections) and La Chaux-de-Fonds (right, one detection) - Data : OSM Considering one of the two differences detected on the city of Frauenfeld, the following image shows the situation in the two compared models, at their respective position in time, that led to the detection : First model situation (left) compared the the second model situation (right) - Data : OSM On can see that, despite the modification of the primitive vertex is very small and difficult to see, the algorithm is able to detect it and to show the user where to look for evolutions. On this example, the shown evolution of the primitive vertex is of the order of 10 centimetres, leading to a very difficult differences to spot without the help of the algorithm. Considering the triangle-based model, the following image shows how detected differencies are rendered to the user : Example of differences detection on Geneva with filled (left) and line-loops (right) triangle rendering modes - Data : OSM This shows how the differences detection algorithm is able to detect and render differences in a triangle-based model using the same color modulation technique as used for line-based models. One cas see how rendering triangle as line-loops can ease the display of variations on triangle-based models allowing to see through the primitives.","title":"Differences Detection and Rendering"},{"location":"TASK-DIFF/#codes-and-ressources","text":"The following lins gives you access to the codes related to this task : 4D platform main framework library 4D platform front-end including graphical client and server instance Shapefile CSV export to UV3 format conversion script UV3 related tool suite including display and conversion","title":"Codes and Ressources"},{"location":"TASK-DIFF/#auxiliary-developments-corrections","text":"In addition to the main developments made on the platform, some other corrections have been made to solve minor problem or to improve the code according to the developed features during this task. The auxiliary developments are summarized here : Correction of socket read function to improve server-client connectivity Creation of scripts that allows to insert sythetic modifications (random displacements on the vertex coordinates) on UV3 models Creation of a script to convert CSV export from shapefile to UV3 format. The script code is available here Dynamical management of lighting during differencies detection on triangle-based models Adding rendering option allowing the user to display triangles as filled triangles, line-loops or points to allow seeing through the primitive","title":"Auxiliary Developments &amp; Corrections"}]}